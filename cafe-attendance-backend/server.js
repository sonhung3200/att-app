const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
require('dotenv').config();

// Import routes
const authRoutes = require('./routes/authRoutes');
const attendanceRoutes = require('./routes/attendanceRoutes');
const shiftRoutes = require('./routes/shiftRoutes');
const salarySettingRoutes = require('./routes/salarySettingRoutes');
const dashboardRoutes = require('./routes/dashboardRoutes');
const userRoutes = require('./routes/userRoutes'); // th√™m d√≤ng n√†y


// Kh·ªüi t·∫°o app
const app = express();

// Middleware
app.use(cors());
app.use(express.json());

// Test route
app.get('/', (req, res) => {
  res.send('‚úÖ Attendance App Server is running...');
});

// S·ª≠ d·ª•ng c√°c routes
app.use('/api/auth', authRoutes);               // ƒêƒÉng k√Ω / ƒêƒÉng nh·∫≠p
app.use('/api/attendance', attendanceRoutes);   // Check-in, check-out, l·ªãch s·ª≠, th·ªëng k√™
app.use('/api/shift', shiftRoutes);             // T·∫°o / l·∫•y ca l√†m
app.use('/api/salary', salarySettingRoutes);    // C·∫•u h√¨nh l∆∞∆°ng
app.use('/api/dashboard', dashboardRoutes);     // Th·ªëng k√™ t·ªïng quan
app.use('/api/users', userRoutes); // th√™m d√≤ng n√†y d∆∞·ªõi c√°c app.use kh√°c

// K·∫øt n·ªëi MongoDB
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
}).then(() => {
  console.log('‚úÖ MongoDB connected');
  app.listen(process.env.PORT || 5000, () => {
    console.log('üöÄ Server running on port 5000');
  });
}).catch(err => {
  console.error('‚ùå MongoDB connection error:', err);
});
